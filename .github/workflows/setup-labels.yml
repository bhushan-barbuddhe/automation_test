# .github/workflows/setup-labels.yml
# Auto-runs once to setup labels, then only when manually triggered

name: "Setup Repository Labels"

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 0 1 * *' # Monthly check (optional)

permissions:
  issues: write

jobs:
  setup-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Setup or Update Labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = [
              // Essential labels only
              { name: 'feature', color: '0e8a16', description: 'New feature' },
              { name: 'bug', color: 'd73a4a', description: 'Bug fix' },
              { name: 'docs', color: '0052cc', description: 'Documentation' },
              { name: 'refactor', color: 'fbca04', description: 'Code refactoring' },
              
              { name: 'backend', color: '1d76db', description: 'Backend/Python changes' },
              { name: 'frontend', color: 'f1c232', description: 'Frontend changes' },
              { name: 'doctype', color: '7057ff', description: 'DocType changes' },
                          
              { name: 'skip-release-notes', color: '6c757d', description: 'Skip in release notes' },
              // Branch-specific labels
              { name: 'development', color: '17a2b8', description: 'Development branch PR' },
              { name: 'uat-release', color: 'fd7e14', description: 'UAT release PR' },
              { name: 'release', color: 'e83e8c', description: 'Production release PR' }
            ];

            console.log('Setting up repository labels...');
            
            // Get existing labels
            const { data: existingLabels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingLabelNames = existingLabels.map(label => label.name);

            for (const label of labels) {
              try {
                if (existingLabelNames.includes(label.name)) {
                  // Update existing label
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                  console.log(`‚úÖ Updated label: ${label.name}`);
                } else {
                  // Create new label
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                  console.log(`üÜï Created label: ${label.name}`);
                }
              } catch (error) {
                console.error(`‚ùå Error with label ${label.name}:`, error.message);
              }
            }
            
            console.log('‚ú® Label setup completed!');

            for (const label of labels) {
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`Created label: ${label.name}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log(`Label already exists: ${label.name}`);
                } else {
                  console.error(`Error creating label ${label.name}:`, error.message);
                }
              }
            }
